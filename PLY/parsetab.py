
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSNAME NUMBER PLUS MINUS TIMES DIVIDE EQUALS LPAREN RPAREN LBRACE RBRACE COMA STRUCTstatement : NAME EQUALS expressionstatement : expressionstatement : structstruct : STRUCT NAME LBRACE assignmentlst RBRACE\n              | STRUCT NAME LBRACE RBRACEassignmentlst : assignmentlst COMA NAME EQUALS expression\n                     | NAME EQUALS expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : MINUS expression %prec UMINUSexpression : LPAREN expression RPAREN\n                  | NUMBERexpression : NAME'
    
_lr_action_items = {'NAME':([0,5,6,8,9,10,11,12,13,24,28,30,33,],[2,15,15,17,15,15,15,15,15,25,15,32,15,]),'MINUS':([0,2,3,5,6,7,9,10,11,12,13,14,15,16,18,19,20,21,22,23,28,31,33,34,],[5,-15,11,5,5,-14,5,5,5,5,5,-12,-15,11,11,-8,-9,-10,-11,-13,5,11,5,11,]),'LPAREN':([0,5,6,9,10,11,12,13,28,33,],[6,6,6,6,6,6,6,6,6,6,]),'NUMBER':([0,5,6,9,10,11,12,13,28,33,],[7,7,7,7,7,7,7,7,7,7,]),'STRUCT':([0,],[8,]),'$end':([1,2,3,4,7,14,15,18,19,20,21,22,23,27,29,],[0,-15,-2,-3,-14,-12,-15,-1,-8,-9,-10,-11,-13,-5,-4,]),'EQUALS':([2,25,32,],[9,28,33,]),'PLUS':([2,3,7,14,15,16,18,19,20,21,22,23,31,34,],[-15,10,-14,-12,-15,10,10,-8,-9,-10,-11,-13,10,10,]),'TIMES':([2,3,7,14,15,16,18,19,20,21,22,23,31,34,],[-15,12,-14,-12,-15,12,12,12,12,-10,-11,-13,12,12,]),'DIVIDE':([2,3,7,14,15,16,18,19,20,21,22,23,31,34,],[-15,13,-14,-12,-15,13,13,13,13,-10,-11,-13,13,13,]),'RPAREN':([7,14,15,16,19,20,21,22,23,],[-14,-12,-15,23,-8,-9,-10,-11,-13,]),'RBRACE':([7,14,15,19,20,21,22,23,24,26,31,34,],[-14,-12,-15,-8,-9,-10,-11,-13,27,29,-7,-6,]),'COMA':([7,14,15,19,20,21,22,23,26,31,34,],[-14,-12,-15,-8,-9,-10,-11,-13,30,-7,-6,]),'LBRACE':([17,],[24,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,5,6,9,10,11,12,13,28,33,],[3,14,16,18,19,20,21,22,31,34,]),'struct':([0,],[4,]),'assignmentlst':([24,],[26,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> NAME EQUALS expression','statement',3,'p_statement_assign','calc.comp.py',75),
  ('statement -> expression','statement',1,'p_statement_expr','calc.comp.py',81),
  ('statement -> struct','statement',1,'p_statement_struct','calc.comp.py',86),
  ('struct -> STRUCT NAME LBRACE assignmentlst RBRACE','struct',5,'p_struct','calc.comp.py',91),
  ('struct -> STRUCT NAME LBRACE RBRACE','struct',4,'p_struct','calc.comp.py',92),
  ('assignmentlst -> assignmentlst COMA NAME EQUALS expression','assignmentlst',5,'p_assignmentlst','calc.comp.py',100),
  ('assignmentlst -> NAME EQUALS expression','assignmentlst',3,'p_assignmentlst','calc.comp.py',101),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','calc.comp.py',108),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','calc.comp.py',109),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','calc.comp.py',110),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','calc.comp.py',111),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','calc.comp.py',119),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_simple','calc.comp.py',123),
  ('expression -> NUMBER','expression',1,'p_expression_simple','calc.comp.py',124),
  ('expression -> NAME','expression',1,'p_expression_name','calc.comp.py',131),
]
